name: Flashpay CI
on:
  pull_request:
    branches:
      - develop
  push:
    branches:
      - main
      - develop

env:
  ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
  ASSETS_UPLOAD_API_KEY: ${{ secrets.ASSETS_UPLOAD_API_KEY }}
  REDIS_URL: 'redis://localhost:6379'
  DJANGO_SETTINGS_MODULE: 'flashpay.settings.test'
  SECRET_KEY: 'abcd123$<12@kskdmdmsecretkeydsndm@'
  CONN_MAX_AGE: 60
  TESTNET_ALGOD_ADDRESS: https://node.testnet.algoexplorerapi.io
  TESTNET_INDEXER_ADDRESS: https://algoindexer.testnet.algoexplorerapi.io
  MAINNET_ALGOD_ADDRESS: https://node.algoexplorerapi.io
  MAINNET_INDEXER_ADDRESS: https://algoindexer.algoexplorerapi.io
  CLOUDINARY_APP_NAME: "flashpay"
  CLOUDINARY_API_KEY: "heurhfkwefvbwjkh"
  CLOUDINARY_API_SECRET: "wehSSDGHGJsdfnbfkjldf"

jobs:
   lint:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      #----------------------------------------------
      #  -----  load cached poetry  -----
      #----------------------------------------------
      - name: Load cached Poetry installation
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: poetry-0

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      #----------------------------------------------
      #              run linters
      #----------------------------------------------
      - name: Run Linters
        env:
          DATABASE_URL: 'postgres://postgres:postgres@localhost:${{ job.services.postgres.ports[5432] }}/postgres'
        run: poetry run make lint

   test:
    needs: ['lint']
    runs-on: ubuntu-latest

    #---------------------------------------------------
    #       add the services needed to run the tests
    #---------------------------------------------------
    services:
      postgres:
        image: postgres:12.11
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      #----------------------------------------------
      #  -----  load cached poetry  -----
      #----------------------------------------------
      - name: Load cached Poetry installation
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: poetry-0

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Run tests
        env:
          DATABASE_URL: 'postgres://postgres:postgres@localhost:${{ job.services.postgres.ports[5432] }}/postgres'
        run: |
          poetry run make test
          poetry run python manage.py migrate --no-input
